# https://github.com/megalithic/dotfiles/blob/631fab98890c6f97f01d0bea018a50c27bd01314/config/ghostty/config#L4
#
# The font families to use.
#
# You can generate the list of valid values using the CLI:
#
#     ghostty +list-fonts
#
# This configuration can be repeated multiple times to specify preferred
# fallback fonts when the requested codepoint is not available in the primary
# font. This is particularly useful for multiple languages, symbolic fonts,
# etc.
#
# If you want to overwrite a previous set value rather than append a fallback,
# specify the value as `""` (empty string) to reset the list and then set the
# new values. For example:
#
#     font-family = ""
#     font-family = "My Favorite Font"
#
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
font-family = "MonaspiceNe Nerd Font Mono"

font-family-bold =
font-family-italic =
font-family-bold-italic =

# The named font style to use for each of the requested terminal font styles.
# This looks up the style based on the font style string advertised by the
# font itself. For example, "Iosevka Heavy" has a style of "Heavy".
#
# You can also use these fields to completely disable a font style. If you set
# the value of the configuration below to literal `false` then that font style
# will be disabled. If the running program in the terminal requests a disabled
# font style, the regular font style will be used instead.
#
# These are only valid if its corresponding font-family is also specified. If
# no font-family is specified, then the font-style is ignored unless you're
# disabling the font style.
font-style = default

font-style-bold = default
font-style-italic = default
font-style-bold-italic = default

# Apply a font feature. This can be repeated multiple times to enable multiple
# font features. You can NOT set multiple font features with a single value
# (yet).
#
# The font feature will apply to all fonts rendered by Ghostty. A future
# enhancement will allow targeting specific faces.
#
# A valid value is the name of a feature. Prefix the feature with a `-` to
# explicitly disable it. Example: `ss20` or `-ss20`.
#
# To disable programming ligatures, use `-calt` since this is the typical
# feature name for programming ligatures. To look into what font features
# your font has and what they do, use a font inspection tool such as
# [fontdrop.info](https://fontdrop.info).
#
# To generally disable most ligatures, use `-calt`, `-liga`, and `-dlig` (as
# separate repetitive entries in your config).

font-feature = -ss01 # ligatures related to the equals glyph like != and ===.
font-feature = -ss02 # ligatures related to the greater than or less than operators.
font-feature = -ss03 # ligatures related to arrows like -> and =>.
font-feature = -ss04 # ligatures related to markup, like </ and />.
font-feature = -ss05 # ligatures related to the F# programming language, like |>.
font-feature = -ss06 # ligatures related to repeated uses of # such as ## or ###.
font-feature = -ss07 # ligatures related to the asterisk like ***.
font-feature = -ss08 # ligatures related to combinations like .= or .-.

# Font size in points. This value can be a non-integer and the nearest integer
# pixel size will be selected. If you have a high dpi display where 1pt = 2px
# then you can get an odd numbered pixel size by specifying a half point.
#
# For example, 13.5pt @ 2px/pt = 27px
font-size = 17.5

# Force one or a range of Unicode codepoints to map to a specific named font.
# This is useful if you want to support special symbols or if you want to use
# specific glyphs that render better for your specific font.
#
# The syntax is `codepoint=fontname` where `codepoint` is either a single
# codepoint or a range. Codepoints must be specified as full Unicode
# hex values, such as `U+ABCD`. Codepoints ranges are specified as
# `U+ABCD-U+DEFG`. You can specify multiple ranges for the same font separated
# by commas, such as `U+ABCD-U+DEFG,U+1234-U+5678=fontname`. The font name is
# the same value as you would use for `font-family`.
#
# This configuration can be repeated multiple times to specify multiple
# codepoint mappings.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.

# https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points powerline & powerline-extras
font-codepoint-map = U+e0b0-U+e0b3,U+e0b4-U+e0c8,U+e0cc-U+e0d4,U+e0ca=JetBrainsMono Nerd Font Mono

# font-awesome
font-codepoint-map = U+f000-U+f2e0,U+e200-U+e2a9=JetBrainsMono Nerd Font Mono

# seti-ui
font-codepoint-map = U+e5fa-U+e6b1=JetBrainsMono Nerd Font Mono

# codicons
font-codepoint-map = U+ea60-U+ebeb=JetBrainsMono Nerd Font Mono

# Draw fonts with a thicker stroke, if supported. This is only supported currently on MacOS.
font-thicken = true

# All of the configurations behavior adjust various metrics determined by the
# font. The values can be integers (1, -1, etc.) or a percentage (20%, -15%,
# etc.). In each case, the values represent the amount to change the original
# value.
#
# For example, a value of `1` increases the value by 1; it does not set it to
# literally 1. A value of `20%` increases the value by 20%. And so on.
#
# There is little to no validation on these values so the wrong values (i.e.
# `-100%`) can cause the terminal to be unusable. Use with caution and reason.
#
# Some values are clamped to minimum or maximum values. This can make it
# appear that certain values are ignored. For example, the underline position
# is clamped to the height of a cell. If you set the underline position so
# high that it extends beyond the bottom of the cell size, it will be clamped
# to the bottom of the cell.
#
# `adjust-cell-height` has some additional behaviors to describe:
#
#   * The font will be centered vertically in the cell.
#
#   * The cursor will remain the same size as the font.
#
#   * Powerline glyphs will be adjusted along with the cell height so
#     that things like status lines continue to look aligned.
adjust-cell-width =

adjust-cell-height = 5%
adjust-font-baseline =
adjust-underline-position =
adjust-underline-thickness =
adjust-strikethrough-position =
adjust-strikethrough-thickness =
adjust-cursor-thickness =

# The method to use for calculating the cell width of a grapheme cluster.
# The default value is `unicode` which uses the Unicode standard to determine
# grapheme width. This results in correct grapheme width but may result in
# cursor-desync issues with some programs (such as shells) that may use a
# legacy method such as `wcswidth`.
#
# Valid values are:
#
#   * `legacy` - Use a legacy method to determine grapheme width, such as
#     wcswidth This maximizes compatibility with legacy programs but may result
#     in incorrect grapheme width for certain graphemes such as skin-tone
#     emoji, non-English characters, etc.
#
#     This is called "legacy" and not something more specific because the
#     behavior is undefined and we want to retain the ability to modify it.
#     For example, we may or may not use libc `wcswidth` now or in the future.
#
#   * `unicode` - Use the Unicode standard to determine grapheme width.
#
# If a running program explicitly enables terminal mode 2027, then `unicode`
# width will be forced regardless of this configuration. When mode 2027 is
# reset, this configuration will be used again.
#
# This configuration can be changed at runtime but will not affect existing
# terminals. Only new terminals will use the new configuration.
grapheme-width-method = unicode

# A named theme to use. The available themes are currently hardcoded to the
# themes that ship with Ghostty. On macOS, this list is in the `Ghostty.app/
# Contents/Resources/ghostty/themes` directory. On Linux, this list is in the
# `share/ghostty/themes` directory (wherever you installed the Ghostty "share"
# directory.
#
# To see a list of available themes, run `ghostty +list-themes`.
#
# Any additional colors specified via background, foreground, palette, etc.
# will override the colors specified in the theme.
#
# This configuration can be changed at runtime, but the new theme will only
# affect new cells. Existing colored cells will not be updated. Therefore,
# after changing the theme, you should restart any running programs to ensure
# they get the new colors.
#
# A future update will allow custom themes to be installed in certain
# directories.
theme = nord

# Background color for the window.
background = #2e3440

# Foreground color for the window.
foreground = #d8dee9

# The foreground and background color for selection. If this is not set, then
# the selection color is just the inverted window background and foreground
# (note: not to be confused with the cell bg/fg).
selection-foreground =
selection-background =

# Swap the foreground and background colors of cells for selection. This
# option overrides the `selection-foreground` and `selection-background`
# options.
#
# If you select across cells with differing foregrounds and backgrounds, the
# selection color will vary across the selection.
selection-invert-fg-bg = false

# The minimum contrast ratio between the foreground and background colors.
# The contrast ratio is a value between 1 and 21. A value of 1 allows for no
# contrast (i.e. black on black). This value is the contrast ratio as defined
# by the [WCAG 2.0 specification](https://www.w3.org/TR/WCAG20/).
#
# If you want to avoid invisible text (same color as background), a value of
# 1.1 is a good value. If you want to avoid text that is difficult to read, a
# value of 3 or higher is a good value. The higher the value, the more likely
# that text will become black or white.
#
# This value does not apply to Emoji or images.
minimum-contrast = 1.1

# The color of the cursor. If this is not set, a default will be chosen.
cursor-color = #d8dee9

# The opacity level (opposite of transparency) of the cursor. A value of 1
# is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value. Note that a
# sufficiently small value such as 0.3 may be effectively invisible and may
# make it difficult to find the cursor.
cursor-opacity = 1

# The style of the cursor. This sets the default style. A running program can
# still request an explicit cursor style using escape sequences (such as `CSI
# q`). Shell configurations will often request specific cursor styles.
#
# Note that shell integration will automatically set the cursor to a bar at
# a prompt, regardless of this configuration. You can disable that behavior
# by specifying `shell-integration-features = no-cursor` or disabling shell
# integration entirely.
#
# Valid values are:
#
#   * `block`
#   * `bar`
#   * `underline`
#
cursor-style = block

# Sets the default blinking state of the cursor. This is just the default
# state; running programs may override the cursor style using `DECSCUSR` (`CSI
# q`).
#
# If this is not set, the cursor blinks by default. Note that this is not the
# same as a "true" value, as noted below.
#
# If this is not set at all (`null`), then Ghostty will respect DEC Mode 12
# (AT&T cursor blink) as an alternate approach to turning blinking on/off. If
# this is set to any value other than null, DEC mode 12 will be ignored but
# `DECSCUSR` will still be respected.
#
# Valid values are:
#
#   * `` (blank)
#   * `true`
#   * `false`
#
cursor-style-blink = true

# The color of the text under the cursor. If this is not set, a default will be chosen.
cursor-text =

# Enables the ability to move the cursor at prompts by using `alt+click` on
# Linux and `option+click` on macOS.
#
# This feature requires shell integration (specifically prompt marking
# via `OSC 133`) and only works in primary screen mode. Alternate screen
# applications like vim usually have their own version of this feature but
# this configuration doesn't control that.
#
# It should be noted that this feature works by translating your desired
# position into a series of synthetic arrow key movements, so some weird
# behavior around edge cases are to be expected. This is unfortunately how
# this feature is implemented across terminals because there isn't any other
# way to implement it.
cursor-click-to-move = true

# Hide the mouse immediately when typing. The mouse becomes visible again when
# the mouse is used. The mouse is only hidden if the mouse cursor is over the
# active terminal surface.
mouse-hide-while-typing = true

# Determines whether running programs can detect the shift key pressed with a
# mouse click. Typically, the shift key is used to extend mouse selection.
#
# The default value of `false` means that the shift key is not sent with
# the mouse protocol and will extend the selection. This value can be
# conditionally overridden by the running program with the `XTSHIFTESCAPE`
# sequence.
#
# The value `true` means that the shift key is sent with the mouse protocol
# but the running program can override this behavior with `XTSHIFTESCAPE`.
#
# The value `never` is the same as `false` but the running program cannot
# override this behavior with `XTSHIFTESCAPE`. The value `always` is the
# same as `true` but the running program cannot override this behavior with
# `XTSHIFTESCAPE`.
#
# If you always want shift to extend mouse selection even if the program
# requests otherwise, set this to `never`.
#
# Valid values are:
#
#   * `true`
#   * `false`
#   * `always`
#   * `never`
#
mouse-shift-capture = false

# Multiplier for scrolling distance with the mouse wheel. Any value less
# than 0.01 or greater than 10,000 will be clamped to the nearest valid
# value.
#
# A value of "1" (default) scrolls te default amount. A value of "2" scrolls
# double the default amount. A value of "0.5" scrolls half the default amount.
# Et cetera.
mouse-scroll-multiplier = 1

# The opacity level (opposite of transparency) of the background. A value of
# 1 is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value.
background-opacity = 1

# A positive value enables blurring of the background when background-opacity
# is less than 1. The value is the blur radius to apply. A value of 20
# is reasonable for a good looking blur. Higher values will cause strange
# rendering issues as well as performance issues.
#
# This is only supported on macOS.
background-blur-radius = 0

# The opacity level (opposite of transparency) of an unfocused split.
# Unfocused splits by default are slightly faded out to make it easier to see
# which split is focused. To disable this feature, set this value to 1.
#
# A value of 1 is fully opaque and a value of 0 is fully transparent. Because
# "0" is not useful (it makes the window look very weird), the minimum value
# is 0.15. This value still looks weird but you can at least see what's going
# on. A value outside of the range 0.15 to 1 will be clamped to the nearest
# valid value.
unfocused-split-opacity = 0.7

# The color to dim the unfocused split. Unfocused splits are dimmed by
# rendering a semi-transparent rectangle over the split. This sets the color of
# that rectangle and can be used to carefully control the dimming effect.
#
# This will default to the background color.
unfocused-split-fill =

# The command to run, usually a shell. If this is not an absolute path, it'll
# be looked up in the `PATH`. If this is not set, a default will be looked up
# from your system. The rules for the default lookup are:
#
#   * `SHELL` environment variable
#
#   * `passwd` entry (user information)
#
# This can contain additional arguments to run the command with. If additional
# arguments are provided, the command will be executed using `/bin/sh -c`.
# Ghostty does not do any shell command parsing.
#
# If you're using the `ghostty` CLI there is also a shortcut to run a command
# with arguments directly: you can use the `-e` flag. For example: `ghostty -e
# fish --with --custom --args`.
command =

# If true, keep the terminal open after the command exits. Normally, the
# terminal window closes when the running command (such as a shell) exits.
# With this true, the terminal window will stay open until any keypress is
# received.
#
# This is primarily useful for scripts or debugging.
wait-after-command = false

# Match a regular expression against the terminal text and associate clicking
# it with an action. This can be used to match URLs, file paths, etc. Actions
# can be opening using the system opener (i.e. `open` or `xdg-open`) or
# executing any arbitrary binding action.
#
# Links that are configured earlier take precedence over links that are
# configured later.
#
# A default link that matches a URL and opens it in the system opener always
# exists. This can be disabled using `link-url`.
#
# TODO: This can't currently be set!

# Enable URL matching. URLs are matched on hover with control (Linux) or
# super (macOS) pressed and open using the default system application for
# the linked URL.
#
# The URL matcher is always lowest priority of any configured links (see
# `link`). If you want to customize URL matching, use `link` and disable this.
link-url = true

# Start new windows in fullscreen. This setting applies to new windows and
# does not apply to tabs, splits, etc. However, this setting will apply to all
# new windows, not just the first one.
#
# On macOS, this always creates the window in native fullscreen. Non-native
# fullscreen is not currently supported with this setting.
#
# On macOS, this setting does not work if window-decoration is set to
# "false", because native fullscreen on macOS requires window decorations
# to be set.
fullscreen = false

# The title Ghostty will use for the window. This will force the title of the
# window to be this title at all times and Ghostty will ignore any set title
# escape sequences programs (such as Neovim) may send.
title =

# The directory to change to after starting the command.
#
# This setting is secondary to the `window-inherit-working-directory`
# setting. If a previous Ghostty terminal exists in the same process,
# `window-inherit-working-directory` will take precedence. Otherwise, this
# setting will be used. Typically, this setting is used only for the first
# window.
#
# The default is `inherit` except in special scenarios listed next. On macOS,
# if Ghostty can detect it is launched from launchd (double-clicked) or
# `open`, then it defaults to `home`. On Linux with GTK, if Ghostty can detect
# it was launched from a desktop launcher, then it defaults to `home`.
#
# The value of this must be an absolute value or one of the special values
# below:
#
#   * `home` - The home directory of the executing user.
#
#   * `inherit` - The working directory of the launching process.
working-directory =

# Synchronize rendering with the screen refresh rate. If true, this will
# minimize tearing and align redraws with the screen but may cause input
# latency. If false, this will maximize redraw frequency but may cause tearing,
# and under heavy load may use more CPU and power.
#
# This defaults to true because out-of-sync rendering on macOS can
# cause kernel panics (macOS 14.4+) and performance issues for external
# displays over some hardware such as DisplayLink. If you want to maximize
# input latency, set this to false with the known aforementioned risks.
#
# Changing this value at runtime will only affect new terminals.
#
# This setting is only supported currently on macOS.
window-vsync = true

# If true, new windows and tabs will inherit the working directory of the
# previously focused window. If no window was previously focused, the default
# working directory will be used (the `working-directory` option).
window-inherit-working-directory = true

# If true, new windows and tabs will inherit the font size of the previously
# focused window. If no window was previously focused, the default font size
# will be used. If this is false, the default font size specified in the
# configuration `font-size` will be used.
window-inherit-font-size = true

# Valid values:
#
#   * `true`
#   * `false` - windows won't have native decorations, i.e. titlebar and
#      borders. On MacOS this also disables tabs and tab overview.
#
# The "toggle_window_decoration" keybind action can be used to create
# a keybinding to toggle this setting at runtime.
#
# Changing this configuration in your configuration and reloading will
# only affect new windows. Existing windows will not be affected.
window-decoration = true

# The font that will be used for the application's window and tab titles.
#
# This is currently only supported on macOS.
window-title-font-family = "MonaspiceNe Nerd Font Mono"

# The theme to use for the windows. Valid values:
#
#   * `auto` - Determine the theme based on the configured terminal
#      background color.
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#
# On macOS, if `macos-titlebar-style` is "tabs", the window theme will be
# automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows. This setting will still apply to
# non-terminal windows within Ghostty.
#
# This is currently only supported on macOS and Linux.
window-theme = auto

# The colorspace to use for the terminal window. The default is `srgb` but
# this can also be set to `display-p3` to use the Display P3 colorspace.
#
# Changing this value at runtime will only affect new windows.
#
# This setting is only supported on macOS.
window-colorspace = display-p3

# The initial window size. This size is in terminal grid cells by default.
#
# We don't currently support specifying a size in pixels but a future change
# can enable that. If this isn't specified, the app runtime will determine
# some default size.
#
# Note that the window manager may put limits on the size or override the
# size. For example, a tiling window manager may force the window to be a
# certain size to fit within the grid. There is nothing Ghostty will do about
# this, but it will make an effort.
#
# This will not affect new tabs, splits, or other nested terminal elements.
# This only affects the initial window size of any new window. Changing this
# value will not affect the size of the window after it has been created. This
# is only used for the initial size.
#
# Windows smaller than 10 wide by 4 high are not allowed.
window-height = 46
window-width = 156

# Whether to enable saving and restoring window state. Window state includes
# their position, size, tabs, splits, etc. Some window state requires shell
# integration, such as preserving working directories. See `shell-integration`
# for more information.
#
# There are three valid values for this configuration:
#
#   * `default` will use the default system behavior. On macOS, this
#     will only save state if the application is forcibly terminated
#     or if it is configured systemwide via Settings.app.
#
#   * `never` will never save window state.
#
#   * `always` will always save window state whenever Ghostty is exited.
#
# If you change this value to `never` while Ghostty is not running, the next
# Ghostty launch will NOT restore the window state.
#
# If you change this value to `default` while Ghostty is not running and the
# previous exit saved state, the next Ghostty launch will still restore the
# window state. This is because Ghostty cannot know if the previous exit was
# due to a forced save or not (macOS doesn't provide this information).
#
# If you change this value so that window state is saved while Ghostty is not
# running, the previous window state will not be restored because Ghostty only
# saves state on exit if this is enabled.
#
# The default value is `default`.
#
# This is currently only supported on macOS. This has no effect on Linux.
window-save-state = always

# Resize the window in discrete increments of the focused surface's cell size.
# If this is disabled, surfaces are resized in pixel increments. Currently
# only supported on macOS.
window-step-resize = false

# The position where new tabs are created. Valid values:
#
#   * `current` - Insert the new tab after the currently focused tab,
#     or at the end if there are no focused tabs.
#
#   * `end` - Insert the new tab at the end of the tab list.
#
# This configuration currently only works with GTK.
window-new-tab-position = end

# Whether to allow programs running in the terminal to read/write to the
# system clipboard (OSC 52, for googling). The default is to allow clipboard
# reading after prompting the user and allow writing unconditionally.
#
# Valid values are:
#
#   * `ask`
#   * `allow`
#   * `deny`
#
clipboard-read = allow
clipboard-write = allow

# Trims trailing whitespace on data that is copied to the clipboard. This does
# not affect data sent to the clipboard via `clipboard-write`.
clipboard-trim-trailing-spaces = true

# Require confirmation before pasting text that appears unsafe. This helps
# prevent a "copy/paste attack" where a user may accidentally execute unsafe
# commands by pasting text with newlines.
clipboard-paste-protection = true

# If true, bracketed pastes will be considered safe. By default, bracketed
# pastes are considered safe. "Bracketed" pastes are pastes while the running
# program has bracketed paste mode enabled (a setting set by the running
# program, not the terminal emulator).
clipboard-paste-bracketed-safe = true

# The total amount of bytes that can be used for image data (i.e. the Kitty
# image protocol) per terminal scren. The maximum value is 4,294,967,295
# (4GiB). The default is 320MB. If this is set to zero, then all image
# protocols will be disabled.
#
# This value is separate for primary and alternate screens so the effective
# limit per surface is double.
image-storage-limit = 320000000

# Whether to automatically copy selected text to the clipboard. `true` will
# only copy on systems that support a selection clipboard.
#
# The value `clipboard` will copy to the system clipboard, making this work on
# macOS. Note that middle-click will also paste from the system clipboard in
# this case.
#
# Note that if this is disabled, middle-click paste will also be disabled.
copy-on-select = clipboard

# The time in milliseconds between clicks to consider a click a repeat
# (double, triple, etc.) or an entirely new single click. A value of zero will
# use a platform-specific default. The default on macOS is determined by the
# OS settings. On every other platform it is 500ms.
click-repeat-interval = 0

# Additional configuration files to read. This configuration can be repeated
# to read multiple configuration files. Configuration files themselves can
# load more configuration files. Paths are relative to the file containing the
# `config-file` directive. For command-line arguments, paths are relative to
# the current working directory.
#
# Cycles are not allowed. If a cycle is detected, an error will be logged and
# the configuration file will be ignored.
config-file =

# Confirms that a surface should be closed before closing it. This defaults to
# true. If set to false, surfaces will close without any confirmation.
confirm-close-surface = true

# Whether or not to quit after the last window is closed. This defaults to
# false. Currently only supported on macOS. On Linux, the process always exits
# after the last window is closed.
quit-after-last-window-closed = true

# Whether to enable shell integration auto-injection or not. Shell integration
# greatly enhances the terminal experience by enabling a number of features:
#
#   * Working directory reporting so new tabs, splits inherit the
#     previous terminal's working directory.
#
#   * Prompt marking that enables the "jump_to_prompt" keybinding.
#
#   * If you're sitting at a prompt, closing a terminal will not ask
#     for confirmation.
#
#   * Resizing the window with a complex prompt usually paints much
#     better.
#
# Allowable values are:
#
#   * `none` - Do not do any automatic injection. You can still manually
#     configure your shell to enable the integration.
#
#   * `detect` - Detect the shell based on the filename.
#
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
#
# The default value is `detect`.
shell-integration = fish

# Shell integration features to enable if shell integration itself is enabled.
# The format of this is a list of features to enable separated by commas. If
# you prefix a feature with `no-` then it is disabled. If you omit a feature,
# its default value is used, so you must explicitly disable features you don't
# want. You can also use `true` or `false` to turn all features on or off.
#
# Available features:
#
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
#
#   * `sudo` - Set sudo wrapper to preserve terminfo.
#
#   * `title` - Set the window title via shell integration.
#
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
shell-integration-features = no-cursor,sudo,title

# Sets the reporting format for OSC sequences that request color information.
# Ghostty currently supports OSC 10 (foreground), OSC 11 (background), and
# OSC 4 (256 color palette) queries, and by default the reported values
# are scaled-up RGB values, where each component are 16 bits. This is how
# most terminals report these values. However, some legacy applications may
# require 8-bit, unscaled, components. We also support turning off reporting
# altogether. The components are lowercase hex values.
#
# Allowable values are:
#
#   * `none` - OSC 4/10/11 queries receive no reply
#
#   * `8-bit` - Color components are return unscaled, i.e. `rr/gg/bb`
#
#   * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`
#
# The default value is `16-bit`.
osc-color-report-format = 16-bit

# The style of the macOS titlebar. Available values are: "native",
# "transparent", and "tabs".
#
# The "native" style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see `window-theme`).
#
# The "transparent" style is the same as "native" but the titlebar will
# be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less
# typical for a macOS application and may not work well with all themes.
#
# The "tabs" style is a completely custom titlebar that integrates the
# tab bar into the titlebar. This titlebar always matches the background
# color of the terminal. There are some limitations to this style:
# On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not
# been tested.
#
# The default value is "transparent". This is an opinionated choice
# but its one I think is the most aesthetically pleasing and works in
# most cases.
#
# Changing this option at runtime only applies to new windows.
macos-titlebar-style = tabs

# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key. You may set this to
# `false` to restore the macOS *Alt* key unicode sequences but this will break
# terminal sequences expecting *Alt* to work.
#
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).
#
# This does not work with GLFW builds.
macos-option-as-alt = true

# Whether to enable the macOS window shadow. The default value is true.
# With some window managers and window transparency settings, you may
# find false more visually appealing.
macos-window-shadow = false

# If `true` (default), applications running in the terminal can show desktop
# notifications using certain escape sequences such as OSC 9 or OSC 777.
desktop-notifications = true

# If `true`, the bold text will use the bright color palette.
bold-is-bright = false

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key
# protocols (specifically this will enable `modifyOtherKeys`), among other
# features. An option exists in vim to modify this: `:set
# keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it
# from working properly. https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty

# String to send when we receive `ENQ` (`0x05`) from the command that we are
# running. Defaults to an empty string if not set.
enquiry-response =
