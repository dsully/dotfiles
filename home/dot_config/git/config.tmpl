# vim:ft=gitconfig

[user]
  name = Dan Sully
  useConfigOnly = true

[include]
    path = ~/.config/git/.github

[includeIf  "hasconfig:remote.*.url:ssh://org-*@github.com/**"]
    path = ~/.config/git/.work

[alias]
    a = commit --amend
    aa = add --all
    co = checkout
    dc = diff --cached
    # https://blog.gitbutler.com/git-tips-2-new-stuff-in-git/
    fpush = push --force-with-lease
    last = log -1 HEAD
    unstage = reset HEAD --

    # https://hachyderm.io/@nedbat/109426516519513998
    actions = "!f() { gh run list --branch $(git rev-parse --abbrev-ref HEAD); }; f"

    # Browse the repository on GitHub.
    browse = "!gh repo view --web"

    # Open merge conflicts in editor.
    mc = "!git diff --name-only --diff-filter=U | tr '\\n' '\\0' | xargs -0 $VISUAL -c '/^\\(|||||||\\|=======\\|>>>>>>>\\|<<<<<<<\\)'"

    # Check out a pull request.
    pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"

    # Switch to a branch, creating it if necessary.
    br = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # https://stackoverflow.com/questions/1337320/how-to-grep-commits-based-on-a-certain-string
    # Find in a commit or changed word.
    find = "log -G"

    # https://stackoverflow.com/a/48650112/81120
    prune-branches = "!git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D"

    # Show the user email for the current repository.
    whoami = config user.email

[advice]
    skippedCherryPicks = false

[branch]
    autosetupmerge = true
    autosetuprebase = always

    # Show most recently changed branches first.
    sort = -committerdate

[color]
    branch = auto
    interactive = auto
    status = auto
    ui = true

[column]
    ui = auto

[core]
    trustctime = false
{{ if lookPath "diff-so-fancy" }}
    pager = diff-so-fancy | /usr/bin/less --tabs=4 -RFX
{{ end }}
    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[diff]
    navigate = true  # use n and N to move between diff sections
    noprefix = true
    renames = copies # Detect copies as well as renames.
    relative = true

{{ if lookPath "git-dive" -}}
[dive]
    theme = Nord
{{ end }}

[fetch]
    # Delete local tracking branches if remote is gone.
    # https://stackoverflow.com/questions/60458452/how-can-i-list-all-remote-existing-branches-in-git
    prune = true
    fsckObjects = true
    # Cache commit graph to speed up graph log / push operations on fetch.
    writeCommitGraph = true

{{ if lookPath "git-lfs" -}}
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
{{ end }}

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = immediate

[init]
    defaultBranch = main

[push]
    default = current
    autoSetupRemote = true

[rebase]
    autosquash = true

[rerere]
    enabled = true
    autoUpdate = true

[status]
    relativePaths = true
