# vim:ft=gitconfig

[user]
  name = Dan Sully
  useConfigOnly = true

[include]
    path = ~/.config/git/.github

[includeIf  "hasconfig:remote.*.url:ssh://org-*@github.com/**"]
    path = ~/.config/git/.work

[alias]
    a = commit --amend
    amend = commit --amend
    untrack = rm --cached
    unadd = restore --staged

    # Diff of last commit
    dlc = diff --cached HEAD^ 

    # list all defined aliases
    aliases = config --get-regexp alias

    # Find very first commit
    first = rev-list --max-parents=0 HEAD

    # what would be merged
    incoming = log HEAD..@{upstream}

    # what would be pushed
    outgoing = log @{upstream}..HEAD
    ; outgoing = log @{u}..

    # List all commits (on this branch) made by me
    mycommits = log --author=dsully

    aa = add --all
    co = checkout
    dc = diff --cached
    # https://blog.gitbutler.com/git-tips-2-new-stuff-in-git/
    fpush = push --force-with-lease
    last = log -1 HEAD
    st = status -sb
    unstage = reset HEAD --

    # https://hachyderm.io/@nedbat/109426516519513998
    actions = "!f() { gh run list --branch $(git rev-parse --abbrev-ref HEAD); }; f"

    # Browse the repository on GitHub.
    browse = "!gh repo view --web"

    # Open merge conflicts in editor.
    mc = "!git diff --name-only --diff-filter=U | tr '\\n' '\\0' | xargs -0 $EDITOR -c '/^\\(|||||||\\|=======\\|>>>>>>>\\|<<<<<<<\\)'"

    # Check out a pull request.
    pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"

    # Switch to a branch, creating it if necessary.
    br = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    lp = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate --date=short --color --decorate

    # https://stackoverflow.com/questions/1337320/how-to-grep-commits-based-on-a-certain-string
    # Find in a commit or changed word.
    find = "log -G"

    # https://stackoverflow.com/a/48650112/81120
    prune-branches = "!git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D"

    rescue = !git fsck --full --no-reflogs --unreachable --lost-found | grep commit | cut -d\\  -f3 | xargs -n 1 git log -n 1 --pretty=oneline > .git/lost-found.txt

    # Show git root dir
    root = rev-parse --show-toplevel

    # Sync with upstream by doing pull --rebase on current branch, followed with GC
    sync-up = !"git fetch && git rebase @{u} && git gc --auto --quiet"

    # Show the user email for the current repository.
    whoami = config user.email

    # bc = branch changes
    bc = "!export MASTER_BRANCH=$(git branch -r | grep -Po 'HEAD -> \\K.*$') && git diff --name-only $MASTER_BRANCH | fzf --ansi --preview 'git diff --color=always $MASTER_BRANCH {}' --bind 'enter:become($EDITOR {})'"
    pending = "!git log $(git describe --tags --abbrev=0)..HEAD --oneline"

    review = "!nvim -c \"DiffviewFileHistory --range=origin/HEAD...HEAD --right-only --no-merges\""

    ####
    jump = !/usr/share/git/git-jump/git-jump
    co = checkout
    lg = log --color --graph \
        --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' \
        --abbrev-commit --
    killbranches = !git branch --merged | grep -v '^*' \
                   | grep -v master | xargs git branch -d 2> /dev/null
    pr = !hub pull-request -b $(git branch | grep -v '^*' | awk '{print($1)}' | fzf)
    prs = !hub pr list --format='%pC%i%Creset %au: %t %l %n ▸ %U%n%n' -o updated
    fixup = !git commit --fixup $(git rev-parse HEAD)
    serve = !git daemon --reuseaddr --verbose --base-path=. --export-all ./.git
    br = !git ls-remote -h . | awk '{print(substr($NF, 12))}' | fzf | xargs git checkout
    dsf = !git diff --color "$@" | diffr | less --tabs=4 -RFX
    filter-commits = "!sh -c 'git log --pretty=format:\"%h - %an: %s\" $1 \
        | fzf --no-sort \
        | cut -d \" \" -f1 ' -"
    ; cpl = "!sh -c 'git log --pretty=format:\"%h - %an: %s\" $1 \
    ;     | fzf --no-sort \
    ;     | cut -d \" \" -f1 \
    ;     | xargs git cherry-pick -x ' -"
    ; reset-file = "!sh -c 'git status --short \
    ;     | fzf --no-sort \
    ;     | cut -d \" \" -f3 \
    ;     | xargs git checkout ' -"
    ; fixup-to = !git commit --fixup=$(git filter-commits)
    ; prune-all = !git remote | xargs -n1 git remote prune
    ; co-recurse = !sh -c 'git checkout $1 && git submodule update --recursive' -
    ; ls-branch = !git ls-tree --name-only -r
    ; co-file = "!sh -c 'git ls-branch $1 \
    ;     | fzf \
    ;     | xargs git checkout $1 -- ' -"
    ; cp-file = "!sh -c 'git ls-branch -r $1 \
    ;     | fzf \
    ;     | xargs -I {} git diff ..$1 -- {} \
    ;     | git apply -3 ' -"
    ; b = branch --sort=authordate -vv
    ; cr = "!sh -c 'git recent \
    ;     | fzf \
    ;     | xargs git checkout $1 ' -"
    ; recent = for-each-ref --count=20 --sort=-committerdate refs/heads/ --format="%(refname:short)"
    ; overview = log --all --since='2 weeks' --oneline --no-merges
    ; recap = !git log --all --oneline --no-merges --author=$(git config user.email)
    ; today = !git log --since=00:00:00 --all --oneline --no-merges --author=$(git config user.email)
    ; st = !$EDITOR '+Gedit :'
    ; fa = "!git ls-files -m -o --exclude-standard | fzf --print0 -m | xargs -0 -t -o git add"

[advice]
    skippedCherryPicks = false

[branch]
    autosetupmerge = true
    autosetuprebase = always

    # Show most recently changed branches first.
    sort = -committerdate

[color]
    branch = auto
    interactive = auto
    status = auto
    ui = true

[column]
    ui = auto

[core]
{{- if lookPath "delta" }}
    pager = delta
{{- end }}

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[credential]
    helper = cache

[credential "https://github.com"]
    helper = !gh auth git-credential

[credential "https://gist.github.com"]
    helper = !gh auth git-credential

{{ if lookPath "delta" -}}
[interactive]
   diffFilter = delta --color-only
{{- end }}

[add.interactive]
    useBuiltin = false # required for git 2.37.0

[delta]
    hyperlinks = true
    keep-plus-minus-markers = false
    line-numbers = false
    navigate = true
    relative-paths = true
    side-by-side = false
    true-color = always

    bg-green = "#8aa872"
    bg-red = "#a54e56"

    blame-code-style = syntax
    blame-format = "{author:<18} {commit:<6} {timestamp:<15}"
    blame-palette = "#2E3440" "#3B4252" "#434C5E"
    file-added-label = [+]
    file-copied-label = [==]
    file-modified-label = [*]
    file-removed-label = [-]
    file-renamed-label = [->]
    file-style = omit
    file-transformation = "s,(.*),  $1,"
    hunk-header-decoration-style = blue ul
    hunk-header-file-style = blue bold
    hunk-header-line-number-style = white bold
    hunk-header-style = file line-number syntax bold italic
    hunk-label = 

    minus-emph-style = white bg-red
    minus-non-emph-style = syntax normal
    minus-style = white bg-red
    plus-emph-style = black bg-green
    plus-non-emph-style = syntax normal
    plus-style = black bg-green

    syntax-theme = Nord
    # Don't color the entire background, just the changed portions
    width = variable 
    whitespace-error-style = black bold
    zero-style = syntax

[diff]
    navigate = true  # use n and N to move between diff sections
    renames = copies # Detect copies as well as renames.

{{ if lookPath "git-dive" -}}
[dive]
    theme = Nord
{{ end }}

[fetch]
    # Delete local tracking branches if remote is gone.
    # https://stackoverflow.com/questions/60458452/how-can-i-list-all-remote-existing-branches-in-git
    prune = true
    fsckObjects = true
    # Cache commit graph to speed up graph log / push operations on fetch.
    writeCommitGraph = true

[filter "gitignore"]
    clean = "sed '/#gitignore$/d'"
    smudge = cat

{{ if lookPath "git-lfs" -}}
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
{{ end }}

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = immediate

[init]
    defaultBranch = master

[mergetool]
    cmd = nvim +"DiffviewOpen"
    hideResolved = true      # Don't show merge conflicts that have already been resolved by git in the mergetool diff.
    prompt = false           # Don't confirm that I want to open the difftool every time.

[pull]
    rebase = true

[push]
    default = upstream
    autoSetupRemote = true

[rebase]
    autosquash = true
    autoStash = true

[rerere]
    enabled = true
    autoUpdate = true

[status]
    relativePaths = true
    submoduleSummary = true

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[ghq "https://github.com/"]
vcs = git
root = ~/dev/src

[ghq "https://github.com/dsully/"]
vcs = git
root = ~/dev/home

[ghq "https://github.com/work/"]
vcs = git
root = ~/dev/work
